(self.webpackChunkpep8_in_korean=self.webpackChunkpep8_in_korean||[]).push([[739],{7181:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>D});var e=a(6252);const p=(0,e.uE)('<h1 id="코드-레이아웃"><a class="header-anchor" href="#코드-레이아웃">#</a> 코드 레이아웃</h1><h2 id="들여쓰기"><a class="header-anchor" href="#들여쓰기">#</a> 들여쓰기</h2><p>각 들여쓰기 레벨마다 4칸 공백을 사용하자.</p><p>여러 줄에 이어지는 문장에서는 괄호 안의 Python의 암시적 줄 결합을 사용하여 괄호들로 감싸진 요소들의 세로줄을 맞추어야 한다. 또는 <em>내어쓰기</em><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>를 사용하여 세로줄을 맞추어야 한다. 내어쓰기를 사용할 때는 고려해야 할 사항이 있다. 우선, 첫 번째 줄에는 아규먼트가 없어야한다. 그리고 추가적인 들여쓰기는 여러 줄에 이어지는 문장 자체를 구분하는 데에 사용되어야 한다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># 옳은 예:</span>\n\n<span class="token comment"># 열린 구분 문자(역: 여기서는 소괄호)를 기준으로 정렬된다.</span>\nfoo <span class="token operator">=</span> long_function_name<span class="token punctuation">(</span>var_one<span class="token punctuation">,</span> var_two<span class="token punctuation">,</span>\n                         var_three<span class="token punctuation">,</span> var_four<span class="token punctuation">)</span>\n\n<span class="token comment"># 함수의 아규먼트와 나머지 부분을 구분하기 위해 추가적인 들여쓰기를 한다.</span>\n<span class="token keyword">def</span> <span class="token function">long_function_name</span><span class="token punctuation">(</span>\n        var_one<span class="token punctuation">,</span> var_two<span class="token punctuation">,</span> var_three<span class="token punctuation">,</span>\n        var_four<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>var_one<span class="token punctuation">)</span>\n\n<span class="token comment"># 내어쓰기는 레벨을 더해야 한다. (역: 나머지 줄에 들여쓰기를 해야 한다는 의미)</span>\nfoo <span class="token operator">=</span> long_function_name<span class="token punctuation">(</span>\n    var_one<span class="token punctuation">,</span> var_two<span class="token punctuation">,</span>\n    var_three<span class="token punctuation">,</span> var_four<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># 잘못된 예:</span>\n\n<span class="token comment"># 세로줄을 맞추지 않았을 때, 첫 번째 줄에 아규먼트는 없어야 한다.</span>\nfoo <span class="token operator">=</span> long_function_name<span class="token punctuation">(</span>var_one<span class="token punctuation">,</span> var_two<span class="token punctuation">,</span>\n    var_three<span class="token punctuation">,</span> var_four<span class="token punctuation">)</span>\n\n<span class="token comment"># 들여쓰기가 구별이 되지 않을 때는 추가적인 들여쓰기가 필요하다.</span>\n<span class="token keyword">def</span> <span class="token function">long_function_name</span><span class="token punctuation">(</span>\n    var_one<span class="token punctuation">,</span> var_two<span class="token punctuation">,</span> var_three<span class="token punctuation">,</span>\n    var_four<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>var_one<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>여러 줄에 이어지는 문장에서 4칸 공백 들여쓰기 규칙은 선택 사항이다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># 내어쓰기는 4칸 공백 외의 방식으로 들여쓰기가 *될 수도 있다* (역: 여기서는 2칸 공백 규칙이 적용되었다.)</span>\nfoo <span class="token operator">=</span> long_function_name<span class="token punctuation">(</span>\n  var_one<span class="token punctuation">,</span> var_two<span class="token punctuation">,</span>\n  var_three<span class="token punctuation">,</span> var_four<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>if</code>-문의 조건 부분이 길어 여러 줄로 작성 될 필요가 있는 경우를 보자. <code>if</code> 키워드에 한 칸 공백과 열린 소괄호를 붙여 작성하면, 나머지 여러 줄로 작성 된 조건부가 저절로 4칸 공백 들여쓰기 되는 것에 주목해야 한다.</p><p>이는 if-문 내 중첩되어 있는 코드 모음과 시각적인 충돌을 일으킬 수 있다. (이 코드 모음도 4칸 공백 들여쓰기가 되어 있을 경우)</p><p>이 PEP 문서에서는 if-문 내 중첩되어 있는 문장으로부터 이러한 조건 부분에 대해 시각적으로 어떻게 추가적인 구별을 할 것인지 (또는 구별을 할 것인지 하지 않을 것인지)에 대한 명백한 입장이 없다. 이런 상황에서 혀용 가능한 선택을 제시하되, 제한하지는 않을 것이다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># 추가적인 들여쓰기를 하지 않은 경우</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>this_is_one_thing <span class="token keyword">and</span>\n    that_is_another_thing<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 구문 하이라이터(syntax highlighter)를 지원하는 에디터에서</span>\n<span class="token comment"># 구별할 수 있게 주석을 더하기</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>this_is_one_thing <span class="token keyword">and</span>\n    that_is_another_thing<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># 두 조건들이 참일 때, 뭐라뭐라....</span>\n    do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 여러 줄에 이어지는 조건 줄에서 추가적인 들여쓰기를 한 경우</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>this_is_one_thing\n        <span class="token keyword">and</span> that_is_another_thing<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>(이항 연산자의 앞뒤로 띄어쓰기를 할 것인지에 대한 논의를 아래의 섹션에서 확인할 수 있다.)</p><p>여러 줄 구조에서 닫힌 괄호들은 리스트의 마지막 줄 공백이 아닌 첫 번째 문자를 기준으로 세로줄을 맞출 수 있다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\nresult <span class="token operator">=</span> some_function_that_takes_arguments<span class="token punctuation">(</span>\n    <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>또는 시작하는 줄의 첫 번째 문자를 기준으로 세로줄을 맞출 수 있다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\nresult <span class="token operator">=</span> some_function_that_takes_arguments<span class="token punctuation">(</span>\n    <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="탭-아니면-스페이스"><a class="header-anchor" href="#탭-아니면-스페이스">#</a> 탭 아니면 스페이스?</h2><p>스페이스가 더 나은 들여쓰기 방식이다.</p><p>탭은 이미 탭으로 들여쓰기 된 코드에서 일관성 유지를 위해서만 사용되어야 한다.</p><p>Python 3에서는 들여쓰기에 탭과 스페이스를 혼용하는 것을 허용하지 않는다.</p><p>탭과 스페이스를 혼용하여 들여쓰기 한 Python 2 코드는 오로지 스페이스만을 사용하는 것으로 바꿔야 한다.</p><p><code>-t</code> 옵션과 함께 Python 2 명령 줄 인터프리터(command line interpreter)를 호출(invoke) 하면 탭과 스페이스가 잘못 혼용된 코드에 대해 경고한다. <code>-tt</code> 옵션을 사용할 때는 경고 대신 에러가 발생한다. 이 옵션들을 매우 권장한다!</p><h2 id="한-줄의-최대-길이"><a class="header-anchor" href="#한-줄의-최대-길이">#</a> 한 줄의 최대 길이</h2><p>모든 줄은 한 줄 당 최대 79개의 문자까지 적을 수 있다.</p><p>구조적인 제약을 덜 받는, 이어지는 긴 텍스트 블록(독스트링 또는 주석)도 줄 당 72개 문자로 제한되어야 한다.</p><p>필요한 에디터 창의 너비를 제한하는 것은 여러 파일들의 창 분할을 가능하게 하고, 인접한 열들에 두 가지 버전으로 보여주는 리뷰 툴을 사용할 때 유용하다.</p><p>대부분의 툴들에서의 디폴트 래핑은 코드의 시각적 구조를 방해하여, 이해하는 것을 더 어렵게 한다. 비록 툴이 마지막 열에 글리프 표식(glyph)<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>을 두었더라도, 창 너비를 80으로 설정한 에디터에서 래핑하는 것을 피하도록 하자. 몇 웹 기반 툴들은 다이나믹 라인(dynamic line) 래핑을 전혀 제공하지 않는다.</p><p>몇몇 팀은 줄의 길이가 더 긴 것을 아주 선호한다. 이 이슈에 동의하는 팀의 우선적으로 또는 배타적으로 유지되는 코드를 위해, 주석이나 독스트링만은 72자로 여전히 제한되도록 하면서, 줄 당 길이 제한을 99까지 늘리는 것은 허용한다.</p><p>Python 표준 라이브러리는 보수적이며, 각 줄을 79자로 제한한다. (그리고 독스트링/주석은 72자까지)</p><p>긴 줄을 래핑하는 바람직한 방법은 Python의 괄호 내 암시적 줄 잇기 방식을 사용하는 것이다. 긴 줄들은 여러줄에 걸쳐 괄호로 표현을 래핑하는 하는 것으로 줄 바꿈을 할 수 있다. 여러 줄이 계속해서 이어질 때 백슬래시를 사용하는 방법보다 이러한 방법을 사용하는 것이 바람직하다.</p><p>백슬래시가 여전히 적절한 경우가 있다. 예를 들어, 길고 여러 줄인 <code>with-</code>문은 암시적인 줄 잇기를 사용할 수가 없어 백슬래시 사용이 적합하다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/some/file/you/want/to/read&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_1<span class="token punctuation">,</span> \\\n     <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/some/file/being/written&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_2<span class="token punctuation">:</span>\n    file_2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file_1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>(여러 줄 <code>with</code>-문에서의 들여쓰기 뿐 아니라, <a href="#%EB%93%A4%EC%97%AC%EC%93%B0%EA%B8%B0">여러 줄의 <code>if</code>-문</a>에 대한 이전의 논의를 보라.)</p><p>또 다른 예시로는 <code>assert</code> 문이 있다.</p><p>여러 줄에 걸쳐 이어지는 문장은 적절히 들여쓰기 해야함을 명심하자.</p><h2 id="이항-연산자-앞뒤로-줄바꿈을-해야할까"><a class="header-anchor" href="#이항-연산자-앞뒤로-줄바꿈을-해야할까">#</a> 이항 연산자 앞뒤로 줄바꿈을 해야할까?</h2><p>지난 수십 년 간 권장된 스타일은 이항 연산자 이후에 줄 바꿈을 하는 것이다. 하지만 이는 두 가지 이유로 가독성을 해칠 수 있다. 연산자들은 화면의 여러 열(columns)에 흩어져 있는 경향이 있다. 그리고 각 연산자는 대응되는 피연산자로부터 떨어져 이전 줄로 옮겨진다. 여기, 어느 피연산자를 더하고 빼는 것인지 알기 위해 우리의 눈이 더 열심히 일해야 하는 예시가 있다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">## 잘못된 예</span>\n<span class="token comment">## 연산자가 대응되는 피연산자로부터 멀리 떨어져 있다.</span>\nincome <span class="token operator">=</span> <span class="token punctuation">(</span>gross_wages <span class="token operator">+</span>\n          taxable_interest <span class="token operator">+</span>\n          <span class="token punctuation">(</span>dividends <span class="token operator">-</span> qualified_dividends<span class="token punctuation">)</span> <span class="token operator">-</span>\n          ira_deduction <span class="token operator">-</span>\n          student_loan_interest<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>이 가독성 문제를 해결하기 위해, 수학자들과 그들의 퍼블리셔들은 반대의 컨벤션을 다른다. Donald Knuth 는 그의 <em>Computers and Typesetting</em> 시리즈에서 다음의 전통적인 규칙을 설명한다. &quot;비록 단락 내의 공식은 항상 이항 연산 및 관계 뒤에 줄 바꿈을 하지만, 표시된 공식은 항상 이항 연산 전에 줄 바꿈을 한다.&quot;<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><p>수학으로부터 온 전통을 따르는 것은 대게 더 가독성 있는 코드를 결과로 낸다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># 옳은 예:</span>\n<span class="token comment"># 연산자와 피연산자를 구별하기 쉽다.</span>\nincome <span class="token operator">=</span> <span class="token punctuation">(</span>gross_wages\n          <span class="token operator">+</span> taxable_interest\n          <span class="token operator">+</span> <span class="token punctuation">(</span>dividends <span class="token operator">-</span> qualified_dividends<span class="token punctuation">)</span>\n          <span class="token operator">-</span> ira_deduction\n          <span class="token operator">-</span> student_loan_interest<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Python 코드에선, 컨벤션이 국지적으로 일관성이 있는 한 이항 연산자 앞이나 뒤에 줄 바꿈을 하는 것이 허용된다. 새로운 코드의 경우 Knuth의 스타일이 제안된다.</p><h2 id="공백-줄"><a class="header-anchor" href="#공백-줄">#</a> 공백 줄</h2><p>최상위 레벨 함수와 클래스 정의 앞뒤로 두 개의 공백 줄이 감싸진다.</p><p>클래스 내의 메소드 정의 앞뒤로는 한 개의 공백 줄이 감싸진다.</p><p>관련된 함수들의 모음을 분리하기 위해 추가적인 공백 줄이 (꼭 필요한 경우에만) 사용될 수 있다. 공백 줄은 관련된 one-liner<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> 의 묶음 사이에서 생략될 수 있다. (예를 들면, 더미 구현의 집합)</p><p>논리적인 섹션을 나타내기 위해 함수 내에서 공백 줄을 꼭 필요한 경우에만 사용하자.</p><p>Python 은 컨트롤 + L (^L) 폼 피드(form feed) 문자를 공백으로 받아들인다. 많은 툴들이 문자를 페이지 구분자로 취급한다. 그래서 이를 파일 내 서로 관련된 섹션들의 페이지를 분리하기 위해 사용할 수 있다. 몇 에디터와 웹 기반 코드 뷰어에서는 컨트롤 + L 이 폼 피드로 인식되지 않을 수 있다는 점을 주의하자. 그리고 그 위치에 다른 글리프를 보여줄 것이다.</p><h2 id="소스-파일-인코딩"><a class="header-anchor" href="#소스-파일-인코딩">#</a> 소스 파일 인코딩</h2><p>코어 Python 배포의 코드는 항상 UTF-8을 사용하여야 한다. (또는 Python 2 에서는 ASCII)</p><p>아스키(Python 2 에서) 또는 UTF-8(Python 3 에서)을 사용하는 파일들은 인코딩 선언(declaration)을 소유하면 안된다.</p><p>표준 라이브러리에서는, 디폴트 값이 아닌 인코딩은 테스트 목적 또는 주석이나 독스트링에서 아스키 문자가 아닌 문자를 포함하는 작성자의 이름을 언급할 때만 사용되어야 한다. 반면에 <code>\\x</code>, <code>\\u</code>, <code>\\U</code>, <code>\\N</code> 이스케이프를 사용하는 것은 문자열 리터럴 내에 아스키가 아닌 데이터를 포함하기 위한 바람직한 방법이다.</p>',53),t=(0,e.Uk)("Python 3.0 과 그 이상은, 다음의 정책이 표준 라이브러리에 의해 규정되어있다. ("),o={href:"https://www.python.org/dev/peps/pep-3131/",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("PEP 3131"),c=(0,e.Uk)(" 참고) Python 표준 라이브러리 내의 모든 식별자들은 반.드.시. 아스키로만 이루어진 식별자들을 사용해야 하며, 가능한 한 영어를 사용해야한다. (많은 경우에, 약어나 기술적인 용어만이 영어가 아니어도 사용된다.) 덧붙여, 문자열 리터럴과 주석 또한 아스키여야한다. 다음의 경우만 예외인데, (a) 아스키가 아닌 기능을 테스트하는 테스트 케이스 그리고, (b) 라틴 알파벳(latin-1, ISO/IEC 8859-1 character set)에 기반하지 않은 작성자명 일 땐, 반드시 이 문자 집합에서 이름의 전자(transliteration)"),r=(0,e.Wm)("sup",{class:"footnote-ref"},[(0,e.Wm)("a",{href:"#fn5",id:"fnref5"},"[5]")],-1),i=(0,e.Uk)("을 제공해야 한다."),u=(0,e.uE)('<p>전세계의 사용자를 대상으로 하는 오픈 소스 프로젝트는 유사한 정책을 채택하길 권장한다.</p><h2 id="가져오기"><a class="header-anchor" href="#가져오기">#</a> 가져오기</h2><ul><li>가져오기(Imports)는 분리된 줄에 사용해야 한다.</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    <span class="token comment">## 옳은 예</span>\n    <span class="token keyword">import</span> os\n    <span class="token keyword">import</span> sys\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    <span class="token comment">## 잘못된 예</span>\n    <span class="token keyword">import</span> sys<span class="token punctuation">,</span> os\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>이것도 괜찮다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    <span class="token comment">## 옳은 예</span>\n    <span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>가져오기는 항상 파일의 맨 위에 놓여져 있다. 모듈 주석과 독스트링 바로 다음, 그리고 모듈 전역들과 상수들 전에 말이다.</p><p>가져오기는 다음의 순서에 따라 구분되어야 한다.</p><ol><li>표준 라이브러리 가져오기</li><li>관련 서드 파티 가져오기</li><li>로컬 어플리케이션/라이브러리 가져오기</li></ol><p>각 가져오기 모음 사이에 공백 줄을 넣어야한다.</p></li><li><p>절대 경로 가져오기가 권장된다. 가져오기 체계가 잘못 구성</p></li><li><p>(예를 들면, 패키지 내부의 디렉토리가 <code>sys.path</code> 에서 끝나는 경우) 된다면, 더 가독성있으며 더 나은 행위를 하는 경향이 있다. (또는, 최소한, 더 나은 에러 메시지를 준다던가)</p></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> mypkg<span class="token punctuation">.</span>sibling\n<span class="token keyword">from</span> mypkg <span class="token keyword">import</span> sibling\n<span class="token keyword">from</span> mypkg<span class="token punctuation">.</span>sibling <span class="token keyword">import</span> example\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>하지만, 명시적 상대경로 가져오기는 절대경로 가져오기의 허용 가능한 대안이다. 특히, 불필요하게 장황하고 복잡한 패키지 레이아웃을 처리할 땐, 절대경로 가져오기를 사용하는 것보다 나을 수 있다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> sibling\n<span class="token keyword">from</span> <span class="token punctuation">.</span>sibling <span class="token keyword">import</span> example\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>표준 라이브러리 코드는 복잡한 패키지 레이아웃을 피하고, 항상 절대경로 가져오기를 사용해야한다.</p><p>암시적인 상대경로 가져오기는 <em>절대</em> 사용되어선 안되며, Python 3 에서는 제거되었다.</p><ul><li>클래스를 갖고 있는 모듈에서 클래스를 가져올 때, 다음과 같이 철자를 바꾸는 것은 괜찮다.</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> myclass <span class="token keyword">import</span> MyClass\n<span class="token keyword">from</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>yourclass <span class="token keyword">import</span> YourClass\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>만약 이 철자가 로컬 이름과 충돌이 발생하면, 명시적으로 철자를 바꾸자.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> myclass\n<span class="token keyword">import</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>yourclass\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>그리고 &quot;myclass.MyClass&quot;와 &quot;foo.bar.yourclass.YourClass&quot;를 사용하자.</p>',18),m=(0,e.Wm)("p",null,[(0,e.Uk)("와일드 카드 가져오기("),(0,e.Wm)("code",null,"from <module> import *"),(0,e.Uk)(") 는 피해야한다. 이들은 네임스페이스 안에서 보여지는 이름들이 불분명하게 만들고, 독자와 많은 자동화 툴들을 혼란시킨다. 공개 API의 일부로 내부 인터페이스를 다시 게시(republishing)하는 와일드 카드 가져오기에 대한 방어 가능한 사용 사례가 하나 있다. (예를 들어, 선택적 가속기 모듈(optional accelerator module)로 부터의 정의로, 인터페이스의 순수 Python 구현을 덮어 쓰고, 정확히 어떤 정의를 덮어 쓸지 미리 알 수 없을 때)")],-1),k=(0,e.Uk)("이름을 이러한 방법으로 다시 게시할 때, "),b=(0,e.Uk)("퍼블릭 그리고 내부 인터페이스에 관한 아래의 지침서"),d=(0,e.Uk)(" 는 계속 적용된다."),h=(0,e.uE)('<h2 id="모듈-레벨-던더-이름"><a class="header-anchor" href="#모듈-레벨-던더-이름">#</a> 모듈 레벨 던더 이름</h2><p>던더들은 앞뒤로 두개의 밑줄(underscore)로 감싸진 이름으로, <code>__all__</code>, <code>__author__</code>, <code>__version__</code> 등이 있다. 모듈 레벨의 &quot;던더들&quot;은 모듈의 독스트링 다음, 모든 가져오기 구문 전에 위치해야한다. <em>단</em>, <code>from __future__</code> 가져오기는 제외한다. Python의 future-imports 명령(mandates)은 모듈내에서 반드시 독스트링을 제외한 어떠한 코드들 보다도 전에 위치해야한다.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;This is the example module.\n\nThis module does stuff.\n&quot;&quot;&quot;</span>\n\n<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> barry_as_FLUFL\n\n__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>\n__version__ <span class="token operator">=</span> <span class="token string">&#39;0.1&#39;</span>\n__author__ <span class="token operator">=</span> <span class="token string">&#39;Cardinal Biggles&#39;</span>\n\n<span class="token keyword">import</span> os\n<span class="token keyword">import</span> sys\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><hr class="footnotes-sep">',4),f={class:"footnotes"},g={class:"footnotes-list"},y=(0,e.uE)('<li id="fn1" class="footnote-item"><p>내어쓰기(hanging indent)란 시작 줄을 제외한 나머지 줄에 들여쓰기를 하는 형식 설정(type-setting) 스타일이다. Python 컨텍스트에서 이 개념은 열린 괄호가 줄의 공백을 제외한 마지막 문자고, 이후 닫힌 괄호가 있는 줄까지 들여쓰기 하는 스타일을 말한다. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><em>역: 상형문자 같은 것</em> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Donald Knuth의 책 &quot;The TeXBook&quot;, 195 ~ 196 쪽. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li>',3),_={id:"fn4",class:"footnote-item"},v=(0,e.Uk)("역: "),w={href:"https://wiki.python.org/moin/Powerful%20Python%20One-Liners",target:"_blank",rel:"noopener noreferrer"},E=(0,e.Uk)("한줄로 끝내버리는 것들"),P=(0,e.Uk)(),x=(0,e.Wm)("a",{href:"#fnref4",class:"footnote-backref"},"↩︎",-1),W={id:"fn5",class:"footnote-item"},B=(0,e.Uk)("역: "),C={href:"https://ko.wikipedia.org/wiki/%EC%A0%84%EC%9E%90_(%EC%96%B8%EC%96%B4%ED%95%99)",target:"_blank",rel:"noopener noreferrer"},q=(0,e.Uk)("위키피디아"),U=(0,e.Uk)(),A=(0,e.Wm)("a",{href:"#fnref5",class:"footnote-backref"},"↩︎",-1),D={render:function(n,s){const a=(0,e.up)("OutboundLink"),D=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,(0,e.Wm)("a",o,[l,(0,e.Wm)(a)]),c,r,i]),u,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[m,(0,e.Wm)("p",null,[k,(0,e.Wm)(D,{to:"/doc/naming-conventions.html#%ED%8D%BC%EB%B8%94%EB%A6%AD-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%82%B4%EB%B6%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4"},{default:(0,e.w5)((()=>[b])),_:1}),d])])]),h,(0,e.Wm)("section",f,[(0,e.Wm)("ol",g,[y,(0,e.Wm)("li",_,[(0,e.Wm)("p",null,[(0,e.Wm)("em",null,[v,(0,e.Wm)("a",w,[E,(0,e.Wm)(a)])]),P,x])]),(0,e.Wm)("li",W,[(0,e.Wm)("p",null,[(0,e.Wm)("em",null,[B,(0,e.Wm)("a",C,[q,(0,e.Wm)(a)])]),U,A])])])])],64)}}},7592:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-1637a9c4",path:"/doc/code-lay-out.html",title:"코드 레이아웃",lang:"ko-KR",frontmatter:{},excerpt:"",headers:[{level:2,title:"들여쓰기",slug:"들여쓰기",children:[]},{level:2,title:"탭 아니면 스페이스?",slug:"탭-아니면-스페이스",children:[]},{level:2,title:"한 줄의 최대 길이",slug:"한-줄의-최대-길이",children:[]},{level:2,title:"이항 연산자 앞뒤로 줄바꿈을 해야할까?",slug:"이항-연산자-앞뒤로-줄바꿈을-해야할까",children:[]},{level:2,title:"공백 줄",slug:"공백-줄",children:[]},{level:2,title:"소스 파일 인코딩",slug:"소스-파일-인코딩",children:[]},{level:2,title:"가져오기",slug:"가져오기",children:[]},{level:2,title:"모듈 레벨 던더 이름",slug:"모듈-레벨-던더-이름",children:[]}],filePathRelative:"doc/code-lay-out.md",git:{updatedTime:1621421703e3,contributors:[]}}}}]);