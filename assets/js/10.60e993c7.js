(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{375:function(t,s,a){"use strict";a.r(s);var n=a(26),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"코드-레이아웃"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#코드-레이아웃"}},[t._v("#")]),t._v(" 코드 레이아웃")]),t._v(" "),a("h2",{attrs:{id:"들여쓰기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#들여쓰기"}},[t._v("#")]),t._v(" 들여쓰기")]),t._v(" "),a("p",[t._v("각 들여쓰기 레벨마다 4칸 공백을 사용하자.")]),t._v(" "),a("p",[t._v("여러 줄에 이어지는 문장에서는 괄호 안의 Python의 암시적 줄 결합을 사용하여\n괄호들로 감싸진 요소들의 세로줄을 맞추어야 한다.\n또는 "),a("em",[t._v("내어쓰기")]),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn1",id:"fnref1"}},[t._v("[1]")])]),t._v("를 사용하여 세로줄을 맞추어야 한다.\n내어쓰기를 사용할 때는 고려해야 할 사항이 있다.\n우선, 첫 번째 줄에는 아규먼트가 없어야한다.\n그리고 추가적인 들여쓰기는 여러 줄에 이어지는 문장 자체를 구분하는 데에 사용되어야 한다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 올바른 예:")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 열린 구분 문자(역: 여기서는 소괄호)를 기준으로 정렬된다.")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 함수의 아규먼트와 나머지 부분을 구분하기 위해 추가적인 들여쓰기를 한다.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("long_function_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 내어쓰기는 레벨을 더해야 한다. (역: 나머지 줄에 들여쓰기를 해야 한다는 의미)")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 잘못된 예:")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 세로줄을 맞추지 않았을 때, 첫 번째 줄에 아규먼트는 없어야 한다.")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 들여쓰기가 구별이 되지 않을 때는 추가적인 들여쓰기가 필요하다.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("long_function_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("여러 줄에 이어지는 문장에서 4칸 공백 들여쓰기 규칙은 선택 사항이다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 내어쓰기는 4칸 공백 외의 방식으로 들여쓰기가 *될 수도 있다* (역: 여기서는 2칸 공백 규칙이 적용되었다.)")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" long_function_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  var_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  var_three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("if")]),t._v("-문의 조건 부분이 길어 여러 줄로 작성 될 필요가 있는 경우를 보자.\n"),a("code",[t._v("if")]),t._v(" 키워드에 한 칸 공백과 열린 소괄호를 붙여 작성하면,\n나머지 여러 줄로 작성 된 조건부가 저절로 4칸 공백 들여쓰기 되는 것에 주목해야 한다.")]),t._v(" "),a("p",[t._v("이는 if-문 내 중첩되어 있는 코드 모음과 시각적인 충돌을 일으킬 수 있다.\n(이 코드 모음도 4칸 공백 들여쓰기가 되어 있을 경우)")]),t._v(" "),a("p",[t._v("이 PEP 문서에서는 if-문 내 중첩되어 있는 문장으로부터\n이러한 조건 부분에 대해 시각적으로 어떻게 추가적인 구별을 할 것인지\n(또는 구별을 할 것인지 하지 않을 것인지)에 대한 명백한 입장이 없다.\n이런 상황에서 혀용 가능한 선택을 제시하되, 제한하지는 않을 것이다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 추가적인 들여쓰기를 하지 않은 경우")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("this_is_one_thing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v("\n    that_is_another_thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    do_something"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 구문 하이라이터(syntax highlighter)를 지원하는 에디터에서")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 구별할 수 있게 주석을 더하기")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("this_is_one_thing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v("\n    that_is_another_thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 두 조건들이 참일 때, 뭐라뭐라....")]),t._v("\n    do_something"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 여러 줄에 이어지는 조건 줄에서 추가적인 들여쓰기를 한 경우")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("this_is_one_thing\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" that_is_another_thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    do_something"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("(이항 연산자의 앞뒤로 띄어쓰기를 할 것인지에 대한 논의를\n아래의 섹션에서 확인할 수 있다.)")]),t._v(" "),a("p",[t._v("여러 줄 구조에서 닫힌 괄호들은 리스트의 마지막 줄\n공백이 아닌 첫 번째 문자를 기준으로 세로줄을 맞출 수 있다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("my_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" some_function_that_takes_arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'f'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("또는 시작하는 줄의 첫 번째 문자를 기준으로 세로줄을 맞출 수 있다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("my_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" some_function_that_takes_arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'f'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"탭-아니면-스페이스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#탭-아니면-스페이스"}},[t._v("#")]),t._v(" 탭 아니면 스페이스?")]),t._v(" "),a("p",[t._v("스페이스가 더 나은 들여쓰기 방식이다.")]),t._v(" "),a("p",[t._v("탭은 이미 탭으로 들여쓰기 된 코드에서 일관성 유지를 위해서만 사용되어야 한다.")]),t._v(" "),a("p",[t._v("Python 3에서는 들여쓰기에 탭과 스페이스를 혼용하는 것을 허용하지 않는다.")]),t._v(" "),a("p",[t._v("탭과 스페이스를 혼용하여 들여쓰기 한 Python 2 코드는 오로지 스페이스만을 사용하는 것으로 바꿔야 한다.")]),t._v(" "),a("p",[a("code",[t._v("-t")]),t._v(" 옵션과 함께 Python 2 명령어 인터프리터(command line interpreter)를 호출(invoke) 하면\n탭과 스페이스가 잘못 혼용된 코드에 대해 경고한다.\n"),a("code",[t._v("-tt")]),t._v(" 옵션을 사용할 때는 경고대신 에러가 발생한다.\n이 옵션들을 매우 권장한다!")]),t._v(" "),a("h2",{attrs:{id:"한-줄의-최대-길이"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#한-줄의-최대-길이"}},[t._v("#")]),t._v(" 한 줄의 최대 길이")]),t._v(" "),a("p",[t._v("모든 줄은 한줄 당 최대 79개의 문자까지 적을 수 있다.")]),t._v(" "),a("p",[t._v("구조적인 제약을 덜 받는, 이어지는 긴 텍스트 블록(독스트링 또는 주석)도\n줄 당 72개 문자로 제한되어야 한다.")]),t._v(" "),a("p",[t._v("필요한 에디터 창의 너비를 제한하는 것은 여러 파일들의 창 분할을 가능하게 하고,\n인접한 열들에 두 가지 버전으로 보여주는 리뷰 툴을 사용할 때 유용하다.")]),t._v(" "),a("p",[t._v("대부분의 툴들에서의 디폴트 래핑은 코드의 시각적구조를 방해하여, 이해하는 것을 더\n어렵게 한다. 비록 툴이 마지막 열에 글리프 표식(glyph)"),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn2",id:"fnref2"}},[t._v("[2]")])]),t._v("을 두었더라도,\n창 너비를 80으로 설정한 에디터에서 래핑하는 것을 피하도록 제한했다.\n몇 웹 기반 툴들은 다이나믹 라인(dynamic line) 래핑을 전혀 제공하지 않는다.")]),t._v(" "),a("p",[t._v("몇몇 팀은 줄의 길이가 더 긴 것을 아주 선호한다. 이 이슈에 동의하는\n팀의 우선적으로 또는 배타적으로 유지되는 코드를 위해,\n주석이나 독스트링만은 72자로 여전히 제한되도록 하면서,\n줄 당 길이 제한을 99까지 한계를 늘리는 것은 허용한다.")]),t._v(" "),a("p",[t._v("Python 표준 라이브러리는 엄격하며, 각 줄이 79자로 제한되도록 요구한다.\n(그리고 독스트링/주석은 72자까지)")]),t._v(" "),a("p",[t._v("긴 줄을 래핑하는 바람직한 방법은 Python의 괄호 내 암시적 줄 잇기 방식을 사용하는 것이다.\n긴 줄들은 여러줄에 걸쳐 괄호로 표현을 래핑하는 하는 것으로 줄 바꿈을 할 수 있다.\n여러 줄이 계속해서 이어질 때 백슬래시를 사용하는 방법보다 이러한 방법을 사용하는 것이 바람직하다.")]),t._v(" "),a("p",[t._v("백슬래시는 여전히 때때로 적절하다. 예를 들어,\n길고 여러 줄인 "),a("code",[t._v("with")]),t._v("-문은 암시적인 줄 잇기를 사용할 수가 없어 백슬래시 사용을 허용한다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/some/file/you/want/to/read'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" file_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \\\n     "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/some/file/being/written'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'w'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" file_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    file_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("(여러 줄 "),a("code",[t._v("with")]),t._v("-문에서의 들여쓰기 뿐 아니라,\n여러 줄의 "),a("code",[t._v("if")]),t._v("-문에 대한 이전의 논의를 보라.)")]),t._v(" "),a("p",[t._v("이러한 경우의 또다른 예시로 "),a("code",[t._v("assert")]),t._v(" 문장이 있다.")]),t._v(" "),a("p",[t._v("여러 줄에 걸쳐 이어지는 문장은 적절히 들여쓰기 해야함을 명심하라.")]),t._v(" "),a("h2",{attrs:{id:"이항-연산자-앞뒤로-줄바꿈을-해야할까"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이항-연산자-앞뒤로-줄바꿈을-해야할까"}},[t._v("#")]),t._v(" 이항 연산자 앞뒤로 줄바꿈을 해야할까?")]),t._v(" "),a("p",[t._v("몇 십년 동안 권장된 스타일은 이항 연산자 이후에 줄바꿈을 하는 거였다.\n하지만 이는 두 가지 이유로 가독성을 해칠 수 있다.\n연산자들은 화면의 여러 열(columns)에 흩어져 있는 경향이 있다.\n그리고 각 연산자는 피연산자로 부터 제거되어 이전 줄로 옮겨진다.\n여기 어느게 더하는 것이고 빼는 것인지 말하기 위해\n눈이 추가적인 일을 해야만 하는 예시가 있다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 잘못된 예")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 연산자가 대응되는 피연산자로 부터 멀리 떨어져 있다.")]),t._v("\nincome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gross_wages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          taxable_interest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dividends "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" qualified_dividends"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n          ira_deduction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n          student_loan_interest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("이 가독성 문제를 해결하기 위해, 수학자들과 그들의 퍼블리셔들은 반대의 컨벤션을 다른다.\nDonald Knuth 는 그의 "),a("em",[t._v("Computers and Typesetting")]),t._v(' 시리즈에서\n다음의 전통적인 규칙을 설명한다.\n"비록 단락 내의 공식은 항상 이항 연산 및 관계 뒤에 줄바꿈을 하지만,\n표시된 공식은 항상 이항 연산 전에 줄바꿈을 한다."'),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn3",id:"fnref3"}},[t._v("[3]")])])]),t._v(" "),a("p",[t._v("수학으로 부터 온 전통을 따르는 것은 대게\n더 가독성 있는 코드를 결과로 낸다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 옳은 예:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 연산자와 피연산자를 구별하기 쉽다.")]),t._v("\nincome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gross_wages\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" taxable_interest\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dividends "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" qualified_dividends"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" ira_deduction\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" student_loan_interest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Python 코드에선, 규칙이 국지적으로 일관성이 있는 한\n이항 연산자 앞이나 뒤에 줄바꿈을 하는 것이 허용된다.\n새로운 코드의 경우 Knuth의 스타일이 제안된다.")]),t._v(" "),a("h2",{attrs:{id:"공백-줄"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#공백-줄"}},[t._v("#")]),t._v(" 공백 줄")]),t._v(" "),a("p",[t._v("탑 레벨 함수와 클래스 정의 앞 뒤로는\n두 개의 공백 줄로 감싸진다.")]),t._v(" "),a("p",[t._v("클래스 내의 메소드 정의 앞뒤로는\n한 줄의 공백 줄로 감싸진다.")]),t._v(" "),a("p",[t._v("관련된 함수들의 모음을 분리하기 위해 추가적인 공백 줄이 (꼭 필요한 경우에만) 사용될 수 있다.\n공백 줄은 관련된 여러 줄의 관련된 one-liner"),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn4",id:"fnref4"}},[t._v("[4]")])]),t._v(" 사이에서 생략될 수 있다.\n(예를 들면, 더미 구현의 집합)")]),t._v(" "),a("p",[t._v("논리적인 구역을 나타내기 위해 함수 내에서 공백줄을 꼭 필요한 경우에만 사용하자.")]),t._v(" "),a("p",[t._v("Python 은 컨트롤 + L (^L) 폼 피드(form feed) 문자를 공백으로 받아들인다.\n많은 툴들 이 문자를 페이지 구분자로 취급한다. 그래서 파일 내 서로 관련 된 구역들의 페이지를\n분리하기 위해 사용할 수 있다.\n몇 에디터와 웹 기반 코드 뷰어에서는 컨트롤 + L 이 폼 피드로 인식되지 않을 수 있다는 점을 주의하자.\n그리고 그 위치에 다른 글리프를 보여줄 것이다.")]),t._v(" "),a("h2",{attrs:{id:"소스-파일-인코딩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소스-파일-인코딩"}},[t._v("#")]),t._v(" 소스 파일 인코딩")]),t._v(" "),a("p",[t._v("코어 Python 배포의 코드는 항상 UTF-8을 사용하여야 한다.\n(또는 Python 2 에서는 ASCII)")]),t._v(" "),a("p",[t._v("(Python 2 에서) 아스키 또는 (Python 3 에서) UTF-8을 사용하는 파일들은\n인코딩 선언(declaration)들을 소유하면 안된다.")]),t._v(" "),a("p",[t._v("표준 라이브러리에서는, 디폴트 값이 아닌 인코딩은\n테스트 목적이나 주석이나 독스트링에서 아스키 문자가 아닌\n문자를 포함하는 작성자의 이름을 언급할 때만 사용되어야 한다.\n반면에 "),a("code",[t._v("\\x")]),t._v(", "),a("code",[t._v("\\u")]),t._v(", "),a("code",[t._v("\\U")]),t._v(", "),a("code",[t._v("\\N")]),t._v(" 이스케이프를 사용하는 것은\n문자열 리터럴 안의 아스키가 아닌 데이터를 포함하기 위한 바람직한 방법이다.")]),t._v(" "),a("p",[t._v("Python 3.0 과 그 이상은, 다음의 정책이 표준 라이브러리에 의해 규정되어있다.\n("),a("a",{attrs:{href:"https://www.python.org/dev/peps/pep-3131/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 3131"),a("OutboundLink")],1),t._v("참고)\nPython 표준 라이브러리 안의 모든 식별자들은 반.드.시. 아스키로만 이루어진 식별자들을 사용해야 하며,\n가능한 한 영어를 사용해야한다.\n(많은 경우에, 영어가 아닌 약어나 기술적인 용어만 영어가 아니어도 된다.)\n덧붙여, 문자열 리터럴과 주석 또한 아스키여야한다. 다음의 경우만 예외인데,\n(a) 아스키가 아닌 기능을 테스트하는 테스트 케이스 그리고,\n(b) 라틴 알파벳(latin-1, ISO/IEC 8859-1 character set)에 기반하지 않은 작성자 명\n일 땐, 반드시 이 문자 집합에서\n이름의 전자(transliteration)"),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn5",id:"fnref5"}},[t._v("[5]")])]),t._v("을 제공해야 한다.")]),t._v(" "),a("p",[t._v("전세계의 사용자를 대상으로 하는 오픈 소스 프로젝트는 유사한 정책을 채택하길 권장한다.")]),t._v(" "),a("h2",{attrs:{id:"가져오기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#가져오기"}},[t._v("#")]),t._v(" 가져오기")]),t._v(" "),a("ul",[a("li",[t._v("가져오기(Imports)는 분리된 줄에 사용해야 한다.")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 옳은 예")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" os\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\n")])])]),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 잘못된 예")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" os\n")])])]),a("p",[t._v("이것도 괜찮다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Correct:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" subprocess "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Popen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PIPE\n")])])]),a("ul",[a("li",[a("p",[t._v("가져오기는 항상 파일의 맨 위에 놓여져 있어야 한다.\n모듈 주석과 독스트링 바로 다음, 그리고 모듈 전역들과 상수들 전에 말이다.")]),t._v(" "),a("p",[t._v("가져오기는 다음의 순서에 따라 구분되어야 한다.")]),t._v(" "),a("ol",[a("li",[t._v("표준 라이브러리 가져오기")]),t._v(" "),a("li",[t._v("관련 서드 파티 가져오기")]),t._v(" "),a("li",[t._v("로컬 어플리케이션/라이브러리의 특정한 가져오기")])]),t._v(" "),a("p",[t._v("각 가져오기 모음 사이에 공백줄을 넣어야한다.")])]),t._v(" "),a("li",[a("p",[t._v("절대 경로 가져오기가 권장된다. 가져오기 체계가 잘못 구성")])]),t._v(" "),a("li",[a("p",[t._v("(예를 들면, 패키지 내부의 디렉토리가 "),a("code",[t._v("sys.path")]),t._v(" 에서 끝나는 경우)된다면,\n더 가독성있으며 더 나은 행위를 하는 경향이 있다.\n(또는, 최소한, 더 나은 에러 메시지를 준다던가)")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" mypkg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" mypkg "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sibling\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" mypkg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" example\n")])])]),a("p",[t._v("하지만, 명시적 상대경로 가져오기는 절대경로 가져오기의 허용 가능한 대안이다.\n특히, 불필요하게 장황한 복잡한 패키지 레이아웃을 처리 할 땐,\n절대경로 가져오기를 사용하는 것보다 나을 수 있다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sibling\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" example\n")])])]),a("p",[t._v("표준 라이브러리 코드는 복잡한 패키지 레이아웃을 피하고,\n항상 절대경로 가져오기를 사용해야한다.")]),t._v(" "),a("p",[t._v("암시적인 상대경로 가져오기는 "),a("em",[t._v("절대")]),t._v(" 사용되어선 안되며,\nPython 3 에서는 제거되었다.")]),t._v(" "),a("ul",[a("li",[t._v("클래스를 갖고 있는 모듈에서 클래스를 가져오기 할때, 다음과 같이\n철자를 바꾸는 것은 괜찮다.")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" myclass "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" MyClass\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yourclass "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" YourClass\n")])])]),a("p",[t._v("만약 이 철자가 로컬 이름 충돌을 야기한다면, 명시적으로 철자를 바꾸자.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" myclass\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yourclass\n")])])]),a("p",[t._v('그리고 "myclass.MyClass"와 "foo.bar.yourclass.YourClass"를 사용하자.')]),t._v(" "),a("ul",[a("li",[a("p",[t._v("와일드 카드 가져오기("),a("code",[t._v("from <module> import *")]),t._v(") 는 피해야한다.\n이들은 네임스페이스 안에서 보여지는 이름들이 불분명하게 만들고,\n독자와 많은 자동화 툴들을 혼란시킨다.\n공개 API의 일부로 내부 인터페이스를 다시 게시(republishing)하는 와일드 카드 가져오기에 대한\n방어 가능한 사용 사례가 하나 있다.\n(예를 들어, 선택적 가속기 모듈(optional accelerator module)로 부터의 정의로,\n인터페이스의 순수 Python 구현을 덮어 쓰고,\n정확히 어떤 정의를 덮어 쓸지 미리 알 수 없을 때)")]),t._v(" "),a("p",[t._v("이름을 이러한 방법으로 다시 게시할 때,\n"),a("RouterLink",{attrs:{to:"/doc/naming-conventions.html#퍼블릭-그리고-내부-인터페이스"}},[t._v("퍼블릭 그리고 내부 인터페이스에 관한 아래의 지침서")]),t._v("\n는 계속 적용된다.")],1)])]),t._v(" "),a("h2",{attrs:{id:"모듈-레벨-던더-이름"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#모듈-레벨-던더-이름"}},[t._v("#")]),t._v(" 모듈 레벨 던더 이름")]),t._v(" "),a("p",[t._v("던더들은 앞 뒤로 두개의 밑줄(underscore)로 감싸진 이름으로,\n"),a("code",[t._v("__all__")]),t._v(", "),a("code",[t._v("__author__")]),t._v(", "),a("code",[t._v("__version__")]),t._v(' 등이 있다.\n모듈 레벨의 "던더들"은 모듈의 독스트링 다음, 가져오기 전에 위치해야한다.\n'),a("em",[t._v("단")]),t._v(", "),a("code",[t._v("from __future__")]),t._v(" 가져오기는 제외한다.\nPython의 future-imports 명령(mandates)은 모듈내에서 반드시 독스트링을 제외한\n어떠한 코드들 보다도 전에 위치해야한다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""This is the example module.\n\nThis module does stuff.\n"""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" __future__ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" barry_as_FLUFL\n\n__all__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n__version__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.1'")]),t._v("\n__author__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cardinal Biggles'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" os\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\n")])])]),a("hr",{staticClass:"footnotes-sep"}),t._v(" "),a("section",{staticClass:"footnotes"},[a("ol",{staticClass:"footnotes-list"},[a("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[a("p",[t._v("내어쓰기(hanging indent)란 시작 줄을 제외한 나머지 줄에 들여쓰기를 하는 형식 설정(type-setting) 스타일이다.\nPython 컨텍스트에서 이 개념은 열린 괄호가 줄의 공백을 제외한 마지막 문자고,\n이후 닫힌 괄호가 있는 줄까지 들여쓰기 하는 스타일을 말한다. "),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[t._v("↩︎")])])]),t._v(" "),a("li",{staticClass:"footnote-item",attrs:{id:"fn2"}},[a("p",[a("em",[t._v("역: 상형문자 같은 것")]),t._v(" "),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref2"}},[t._v("↩︎")])])]),t._v(" "),a("li",{staticClass:"footnote-item",attrs:{id:"fn3"}},[a("p",[t._v('Donald Knuth의 책 "The TeXBook", 195 ~ 196 쪽. '),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref3"}},[t._v("↩︎")])])]),t._v(" "),a("li",{staticClass:"footnote-item",attrs:{id:"fn4"}},[a("p",[a("em",[t._v("역: "),a("a",{attrs:{href:"https://wiki.python.org/moin/Powerful%20Python%20One-Liners",target:"_blank",rel:"noopener noreferrer"}},[t._v("한줄로 끝내버리는 것들"),a("OutboundLink")],1)]),t._v(" "),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref4"}},[t._v("↩︎")])])]),t._v(" "),a("li",{staticClass:"footnote-item",attrs:{id:"fn5"}},[a("p",[a("em",[t._v("역: "),a("a",{attrs:{href:"https://ko.wikipedia.org/wiki/%EC%A0%84%EC%9E%90_(%EC%96%B8%EC%96%B4%ED%95%99)",target:"_blank",rel:"noopener noreferrer"}},[t._v("위키피디아"),a("OutboundLink")],1)]),t._v(" "),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref5"}},[t._v("↩︎")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);